{namespace docsIndex}

/**
 * This template will be rendered by SoyWeb when the user loads static.soy.
 * It deliberately includes dummy data so the designer can get a feel for how
 * the task list will appear with real data rather with minimal copy and paste.
 */
{template .soyweb}
{call docs.layout}
	{param content kind="html"}
		<h1>Getting Started</h1>
		<p>
			There are many different ways to build components using Metal.js. You can
			use the built-in integrations with <a href="http://developers.google.com/closure/templates/">soy</a> or <a href="https://facebook.github.io/jsx/">JSX</a> templates,
			or even build your own template abstraction on
			top of Metal.js and use it instead. You can build the ES6 code using
			<strong> babel</strong>, <strong>traceur</strong> or any other transpiler.
			You can test using <strong>karma</strong>, <strong>jasmine</strong> or any
			other test framework, and can use any directory structure for your
			project. To sum it up, you can customize everything to your own needs. The
			world is your oyster.
		</p>
		<p>
			This guide will focus on a quick and easy way to get started with
			Metal.js. But if you are excited to try it out as soon as possible you can just play around with this <a href="https://jsfiddle.net/metaljs/y1tqa7vz/" target="_blank">JSFiddle</a>.
		</p>

		<h2 id="boilerplate">Boilerplate</h2>

		<p>
			You can organize your <strong>Metal.js</strong> project in any way you
			want, but to start out we recommend using
			the <a href="/docs/yeoman-generator.html">Yeoman generator</a> we've
			created, which prepares both the project structure as well as a basic
			development workflow for you.
		</p>

		<p>
			You can use it if you wish, but to makes things even simpler we're
			providing a zip with the boilerplate that the generator would create for
			this tutorial, so you can just download it here:
		</p>

		<div class="docs-download-buttons">
			<a
				href="/downloads/boilerplate.zip"
				class="btn btn-size-medium btn-effect-primary">
				Boilerplate with Soy
			</a>
			<a
				href="/downloads/boilerplate-jsx.zip"
				class="btn btn-size-medium btn-effect-primary">
				Boilerplate with JSX
			</a>
		</div>

		<p>
			Note that this zip you've downloaded contains not only the starting
			boilerplate, but also a folder for each step of this tutorial guide, so
			that you can either code along with us or just check out the final code
			for each step.
		</p>

		<p>
			Now that you have the boilerplate, you just need to:
		</p>

		<ol>
			<li>
				<p>
					Install <a href="https://nodejs.org">NPM</a> v3.0.0 or newer (if you
					don't have it yet)
				</p>
			</li>
			<li>
				<p>
					<strong>For soy users only</strong>:
					Install <a href="http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html">Java</a> version
					8 or newer (if you don't have it yet)
				</p>
			</li>
			<li>
				<p>
					Enter the <strong>1. Hello World</strong> folder in your terminal and
					install its npm dependencies, by typing: <code>[sudo] npm i</code>
				</p>
			</li>
		</ol>

		<p>
			Once the dependency installation ends, you'll get a directory tree similar
			to this:
		</p>

		<textarea class="code" data-mode="javascript">{literal}├── demos
│   └── index.html
├── node_modules
├── package.json
├── src
│   ├── Modal.js
│   ├── Modal.soy // Only if Soy was chosen
│   └── modal.scss
└── test
    └── Modal.js{/literal}</textarea>

		<h2>Build</h2>

		<p>
			If you open the generated <strong>src/Modal.js</strong> file you may
			notice that it's using
			<a href="https://babeljs.io/docs/learn-es2015/"> ES6</a> syntax:
		</p>

		<textarea class="code" data-mode="javascript">{literal}class Modal extends ...{/literal}
		</textarea>

		<p>
			That means that it'll need to go through a build process, since browsers
			haven't fully implemented all ES6 features yet.
		</p>
		<p>
			<strong>generator-metal</strong> already prepares some useful scripts that
			you can use, including a build script. By default, this script will build
			everything into global variables. To use it, simply type: <code>npm run build</code>
		</p>

		<h2>Demo Page</h2>

		<p>
			Now that the code was built, just open the generated
			<strong> demos/index.html</strong> file on your browser. It should display
			a nice <strong>Hello World</strong> message, like this:
			<br><br>
			<img src="../images/docs/hello_world.png" width="100">
		</p>

		<p>
			If you look at <strong>demos/index.html</strong>'s contents you'll see
			how the component is being rendered. In this example, it's simply being
			instantiated directly by calling <code>new metal.Modal();</code>.
		</p>

		<p>
			By default this will append the component to the document's body. If you
			want though, you can specify where it should be rendered. Check the guide
			about <a href="/docs/rendering-components.html">rendering components</a> to
			find out how.
		</p>

		<h2>Hello World</h2>

		<p>
			As you've noticed, the generated project automatically renders
			<strong> Hello World</strong> for you. Curious to see how that's done?
			It's simple, just take a look at the generated template:
		</p>

		{call codeTabs.main}
			{param tabs: ['Soy: src/Modal.soy', 'JSX: src/Modal.js'] /}
			{param content kind="html"}
				<textarea class="code" data-mode="x-soy">{literal}&lbrace;namespace Modal&rbrace;

/**
 * This renders the component's whole content.
 * Note: has to be called ".render".
 */
&lbrace;template .render&rbrace;
  &lt;div&gt;Hello World&lt;/div&gt;
&lbrace;/template&rbrace;{/literal}
				</textarea>
				<textarea class="code hidden" data-mode="javascript">{literal}import JSXComponent from 'metal-jsx';

class Modal extends JSXComponent {
	render() &lbrace;
		return &lt;div&gt;Hello World&lt;/div&gt;;
	}
}

export default Modal;{/literal}
				</textarea>
			{/param}
		{/call}

		<p>
			You can replace the default content with any other to change what your
			component renders. Just make sure to build the code again after making
			your changes.
		</p>

		<h2>Next steps</h2>

		<p>
			Now that you have gone through running a simple
			<strong> Hello World</strong> component, let's actually turn it into a
			<strong> Modal</strong>.
		</p>

		<p><strong><a href="/docs/modal.html">↪ Tutorial: Modal</a></strong></p>
	{/param}
{/call}
{/template}
