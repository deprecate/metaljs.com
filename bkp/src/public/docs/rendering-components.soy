{namespace docsRenderingComponents}

/**
 * This template will be rendered by SoyWeb when the user loads static.soy.
 * It deliberately includes dummy data so the designer can get a feel for how
 * the task list will appear with real data rather with minimal copy and paste.
 */
{template .soyweb}
{call docs.layout}
	{param content kind="html"}
		<h1>Rendering Components</h1>

		<p>
			The <a href="/docs">quick start tutorial</a> explains how to create and
			render a new component. In its examples components are always being
			appened directly to the document's body though, but what's usually
			necessary is to render in a specific position.
		</p>

		<h2>Replacing an existing element</h2>

		<p>
			If you wish your component to replace an existing element on the dom,
			you just need to pass it (or a selector for it) as
			the <strong>element</strong> property of the constructor configuration,
			like this:
		</p>

		<textarea class="code" data-mode="javascript">
{literal}// Passsing the element itself
new Modal({element: elementToReplace});

// Passing a selector to the element
new Modal({element: '#elementToReplace'});
{/literal}
		</textarea>

		<h2>Specifying the parent</h2>

		<p>
			You can also specify the parent element that should receive the
			component's contents via the second constructor param, like this:
		</p>

		<textarea class="code" data-mode="javascript">
{literal}// Passsing the element itself
new Modal(data, parentElement);

// Passing a selector to the element
new Modal(data, '#parentElement');
{/literal}
		</textarea>
	{/param}
{/call}
{/template}
