{namespace docsNestedComponents}

/**
 * This template will be rendered by SoyWeb when the user loads static.soy.
 * It deliberately includes dummy data so the designer can get a feel for how
 * the task list will appear with real data rather with minimal copy and paste.
 */
{template .soyweb}
{call docs.layout}
	{param content kind="html"}
		<h1>Nested Components</h1>

		<p>
			The ability to reference components inside templates can be very useful.
			It enables the developer to correctly place the child component at the
			right position inside the parent in an intuitive way.
		</p>

		<p>
			This can certainly be done with <strong>Metal.js</strong> components. For
			example, let's say we've already built a simple component
			called <strong>Button</strong>.
		</p>

		<p>
			Now we're building a <strong>Modal</strong> component, and we want it to
			render some buttons inside the footer. In <strong>Modal</strong>'s
			template file we could do the following:
		</p>

		{call codeTabs.main}
			{param tabs: ['Soy: src/Modal.soy', 'JSX: src/Modal.js'] /}
			{param content kind="html"}
				<textarea class="code" data-mode="x-soy">
{literal}&lt;div class="footer"&gt;
  &lbrace;foreach $button in $buttons&rbrace;
    &lbrace;call Button.render&rbrace;
      &lbrace;param label: $button /&rbrace;
    &lbrace;/call&rbrace;
  &lbrace;/foreach&rbrace;
&lt;/div&gt;{/literal}
				</textarea>
				<textarea class="code hidden" data-mode="javascript">
{literal}var buttons = this.props.buttons.map(button => {
  return &lt;Button label={button} /&gt;;
});
return &lt;div class="footer"&gt;{buttons}&lt;/div&gt;;{/literal}
				</textarea>
			{/param}
		{/call}

		<p>
			When Modal is rendered, the buttons also will be, at the specified
			position. Besides this, <strong>Button</strong> components will be
			automatically instantiated for these elements.
		</p>

		<h2>Accessing sub component instances</h2>

		<p>
			But what if we need to access the created instances? That's possible by
			using <strong>ref</strong>. Let's add one to the previous example and see
			what happens:
		</p>

		{call codeTabs.main}
			{param tabs: ['Soy: src/Modal.soy', 'JSX: src/Modal.js'] /}
			{param content kind="html"}
				<textarea class="code" data-mode="x-soy">
{literal}&lbrace;foreach $button as $buttons&rbrace;
  &lbrace;call Button.render&rbrace;
    &lbrace;param label: $button /&rbrace;
    &lbrace;param ref: 'button' + index($button) /&rbrace;
  &lbrace;/call&rbrace;
&lbrace;/foreach&rbrace;{/literal}
				</textarea>
				<textarea class="code hidden" data-mode="javascript">
{literal}var buttons = this.props.buttons.map((button, index) => {
  return &lt;Button label={button} ref={'button' + index} /&gt;;
});{/literal}
				</textarea>
			{/param}
		{/call}

		<p>
			Now you'll be able to access your sub components through
			your instance's <code>refs</code> property, like this:
		</p>

		<textarea class="code" data-mode="javascript">{literal}
modal.refs.button0 // The instance for first button
modal.refs.button1 // The instance for second button{/literal}</textarea>
	{/param}
{/call}
{/template}
