{namespace docsState}

/**
 * This template will be rendered by SoyWeb when the user loads static.soy.
 * It deliberately includes dummy data so the designer can get a feel for how
 * the task list will appear with real data rather with minimal copy and paste.
 */
{template .soyweb}
{call docs.layout}
	{param content kind="html"}
		<h1>State</h1>

		<p>
			The <strong>State</strong> class provides a way of defining state
			properties for the classes that extend it, as well as watching these
			properties for value changes.
		</p>

		<p>
			The <strong>Component</strong> class already extends
			from <strong>State</strong> by default, besides automatically rerendering
			when there is a change.
		</p>

		<p>
			If your class doesn't need to render anything it's best to extend
			from <strong>State</strong> directly though. That way you'll have access
			to its features without also inheriting logic you won't need.
		</p>

		<h2>Configuring state</h2>

		<p>
			The following example is a class that extends directly
			from <strong>State</strong> and defines a state property
			named <code>number</code> on itself:
		</p>

		<textarea class="code" data-mode="javascript">{literal}
import core from 'metal';
import State from 'metal-state';

class Calculator extends State {
  /**
   * Coverts string numbers to the number type.
   */
  setNumber(val) {
    if (core.isString(val)) {
      val = parseInt(val, 10);
    }
    return val;
  }
}

Calculator.STATE = {
  number: {
    // Called whenever a new value is set. Useful when normalizing your
    // state data.
    setter: 'setNumber',

    // Accepts either number or string types. If the validator check fails,
    // the new value is discarded, and the current value kept.
    validator: val => core.isNumber(val) || core.isString(val),

    // Initial value
    value: 0
  }
}{/literal}</textarea>

		<p>
			If you're familiar with <a href="http://yuilibrary.com/">YUI</a>, you may
			recognize this feature and notice that it's very similar to how attributes
			are defined there. You basically just need to list all attributes you'll
			be using on the <strong>STATE</strong> static variable (on YUI it would be
			on <strong>ATTRS</strong>), and provide their configuration options, like
			initial value and validator. For a list of all valid options, take a look
			at <strong>State</strong>'s <a href="http://github.com/metal/metal-state/blob/c87ac15b8a9fa3ee64c421f22411f97cd376024a/src/State.js#L61">docs</a>.
		</p>

		{call .acessingAndUpdating /}

		<h2 id="config">Configuration data</h2>

		<p>
			Any data passed to the constructor that has not been configured as a
			state property can still be accessed via <code>config</code>. Changes
			to these properties won't be tracked, so it's usually intended for your
			component's options, which are only set from the outside.
		</p>

		<textarea class="code" data-mode="javascript">
{literal}var obj = new Calculator({
  number: 10,
  foo: 'foo'
});
console.log(obj.number); // Prints 2
console.log(obj.foo); // Prints undefined
console.log(obj.config.foo); // Prints 'foo'{/literal}
		</textarea>

	{/param}
{/call}
{/template}

/**
 * Content added after a State example.
 */
{template .acessingAndUpdating}
	<h2>Accessing and updating state</h2>

	<p>
		The constructor can receive a configuration object with initial values to
		use for its state properties. You can access or change an object's state in
		the same way you'd access or change any object property. Or you can also
		call the <code>setState</code> function, which updates the properties
		specified by the given object.
	</p>

	<textarea class="code" data-mode="javascript">
{literal}var obj = new Calculator();
console.log(obj.number); // Prints 0

obj.number = '1';
console.log(obj.number); // Prints 1

obj.setState({number: 2});
console.log(obj.number); // Prints 2{/literal}
	</textarea>

	<p>You can also track state value changes by listening to the appropriate event.</p>

	<textarea class="code" data-mode="javascript">
{literal}obj.on('numberChanged', function(event) &lbrace;
// event.prevVal has the previous value.
// event.newVal has the new value.
&rbrace;);{/literal}
	</textarea>

	<p>To see all features of the <strong>State</strong> class take a look at its <a href="https://github.com/metal/metal-state/blob/master/test/State.js">unit tests</a>.</p>
{/template}
