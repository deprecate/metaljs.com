{namespace docsJSXComponents}

/**
 * This template will be rendered by SoyWeb when the user loads static.soy.
 * It deliberately includes dummy data so the designer can get a feel for how
 * the task list will appear with real data rather with minimal copy and paste.
 */
{template .soyweb}
{call docs.layout}
	{param content kind="html"}
		<h1>JSX Components</h1>

		<p>
			For a practical tutorial on how to build components using JSX templates,
			make sure to follow
			the <a href="/docs/modal.html">Modal tutorial</a> section.
		</p>

		<p>
			This guide will explain some details about the integration
			between <strong>Metal.js</strong> components
			and <a href="https://facebook.github.io/jsx/">JSX templates</a>.
		</p>

		<p>
			Note that <strong>Metal.js</strong> is template agnostic, so it's not
			necessary to use JSX at all. That said, we already provide a very good
			integration between metal components and JSX, so if you like using it
			you should give it a try.
		</p>

		<h2>JSXComponent</h2>

		<p>
			The only thing you need to do to use JSX in
			your <strong>Metal.js</strong> component is to
			extend from <strong>JSXComponent</strong>, like this:
		</p>

		<textarea class="code" data-mode="javascript">
{literal}import JSXComponent from 'metal-jsx';

class MyComponent extends JSXComponent {
}

export default MyComponent;{/literal}
		</textarea>

		<h2><code>render</code> function</h2>

		<p>
			Now that we've extended from <strong>JSXComponent</strong> we can use jsx
			in the <code>render</code> method to specify what our component should
			render.
		</p>

		<textarea class="code" data-mode="javascript">
{literal}import JSXComponent from 'metal-jsx';

class MyComponent extends JSXComponent {
	render() {
		return (
			&lt;div&gt;
				Hello {this.state.name}
				Hello {this.props.location}
			&lt;/div&gt;;
		);
	}
}

MyComponent.PROPS = {
	location: {
		validator: core.isString,
		value: 'Mars'
	}
};

MyComponent.STATE = {
	name: {
		validator: core.isString,
		value: 'World'
	}
};

export default MyComponent;{/literal}
		</textarea>

		<p>
			Note that your component can have two different types of
			data: <a href="/docs/state.html">state</a> and <a href="/docs/state.html#config">props</a>.
			The main difference is that props is accessed
			via <code>this.props</code> and will be the original data received from
			parent components or the constructor. State is accessed
			from <code>this.state</code> though, like <code>this.state.name</code> in the previous
			example, and can be configured to use validators, setters, initial values
			and other features. Check out the guide
			about <a href="/docs/state.html">state</a> to learn more about this.
		</p>

		<h2>Children props</h2>

		<p>
			Whenever content is passed inside a component's jsx tag, it will be
			received through the <code>children</code> props property. That way the
			component can decide if this content will be rendered at all, and where
			exactly it should go.
		</p>

		<p>
			For example, imagine a simple list component that receives its items as
			its content, like this:
		</p>

		<textarea class="code" data-mode="javascript">
{literal}&lt;List&gt;
  &lt;li&gt;Item 1&lt;/li&gt;
  &lt;li&gt;Item 2&lt;/li&gt;
  &lt;li&gt;Item 3&lt;/li&gt;
&lt;/List&gt;{/literal}
		</textarea>

		<p>
			This could be implemented by using the <code>children</code> props:
		</p>

		<textarea class="code" data-mode="javascript">
{literal}class List extends JSXComponent {
  render() {
    return &lt;ul&gt;{this.props.children}&lt;/ul&gt;
  }
}{/literal}
		</textarea>

		<p>
			If you inspect <code>this.props.children</code> you'll notice that it's
			an array of objects. That gives you a lot of power when handling your
			component's contents. For example, you can choose to render only part of
			your children, like this:
		</p>

		<textarea class="code" data-mode="javascript">
{literal}// Renders only the second item.
return &lt;ul&gt;{this.props.children[1]}&lt;/ul&gt;{/literal}
		</textarea>

		<p>Or even change the data that they should receive before being rendered:</p>

		<textarea class="code" data-mode="javascript">
{literal}// Forces all items to use the 'my-list-item-class' css class.
this.props.children.forEach(child => {
  child.class = 'my-list-item-class';
};
return &lt;ul&gt;{this.props.children}&lt;/ul&gt;{/literal}
		</textarea>

		<h2>Functional components</h2>

		<p>
			Sometimes you'll create very simple components, that have no other behavior
			besides rendering their own contents. In this case you can drop using
			classes, and instead create simple functions that just render the contents
			instead.
		</p>

		<p>
			For example, let's create a simple <strong>Button</strong> component as
			a function:
		</p>

		<textarea class="code" data-mode="javascript">
{literal}/**
 * Functional components receive the configuration
 * object as the first param.
 */
var Button = ({ cssClass, label }) => {
  return &lt;button type="button" class={cssClass}&gt;{label}&lt;/button&gt;;
};{/literal}
		</textarea>

		<p>
			You can then use it from parent components in the same way that you'd use
			a component class, for example:
		</p>

		<textarea class="code" data-mode="javascript">
{literal}&lt;Button class="btn btn-primary" label="OK" /&gt;{/literal}
		</textarea>

		<h2>Rendering JSX Components</h2>

		<p>
			JSX components can either be rendered in
			the <a href="rendering-components.html">usual way</a>, or via
			the <code>JSXComponent.render</code> function, like this:
		</p>

		<textarea class="code" data-mode="javascript">
{literal}class Button extends JSXComponent {
  render() {
    // Your render logic
  }
}
JSXComponent.render(Button, {label: 'OK'}, parent);{/literal}
		</textarea>

		<p>
			You can also pass a functional component to it:
		</p>

		<textarea class="code" data-mode="javascript">
{literal}var Button = props => {
  // Your render logic
};
JSXComponent.render(Button, {label: 'OK'}, parent);{/literal}
		</textarea>

		<p>
			Or even render directly via JSX:
		</p>

		<textarea class="code" data-mode="javascript">
{literal}JSXComponent.render(<Button label="OK" />, parent);{/literal}
		</textarea>

		<h2>JSX compilation</h2>

		<p>
			For the integration
			between <strong>Metal.js</strong> and <strong>JSX</strong> to work, the
			JSX code needs to be compiled via a babel plugin
			called <a href="http://npmjs.com/package/babel-plugin-incremental-dom">babel-plugin-incremental-dom</a>.
			Using it directly means you'd need to configure it manually though, so we
			also provide
			a <a href="http://npmjs.com/package/babel-preset-metal-jsx">babel preset</a> that
			you can use instead.
		</p>
	{/param}
{/call}
{/template}
