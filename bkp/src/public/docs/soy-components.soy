{namespace docsSoyComponents}

/**
 * This template will be rendered by SoyWeb when the user loads static.soy.
 * It deliberately includes dummy data so the designer can get a feel for how
 * the task list will appear with real data rather with minimal copy and paste.
 */
{template .soyweb}
{call docs.layout}
	{param content kind="html"}
		<h1>Soy Components</h1>

		<p>
			For a full tutorial on how to build components using soy templates, make
			sure to follow the <a href="/docs/modal.html">Modal tutorial</a> section.
		</p>

		<p>
			This guide will explain some details about the integration
			between <strong>Metal.js</strong> components
			and <a href="http://developers.google.com/closure/templates/">soy templates</a>.
		</p>

		<p>
			Note that <strong>Metal.js</strong> is template agnostic, so it's not
			necessary to use soy at all. That said, we already provide a very good
			integration between metal components and soy, so if you like this
			template language you should give it a try.
		</p>

		<h2>Soy.register</h2>

		<p>
			The only thing you need to do to use soy templates in
			your <strong>Metal.js</strong> component is to
			call <code>Soy.register</code>, passing it your component class and the
			soy templates you're going to use, like this:
		</p>

		<textarea class="code" data-mode="javascript">
{literal}import templates from './MyComponent.soy';
import Component from 'metal-component';
import Soy from 'metal-soy';

class MyComponent extends Component {
}
Soy.register(MyComponent, templates);

export default MyComponent;{/literal}
		</textarea>

		<p>
			By default, <strong>Metal.js</strong> will use the soy template
			called <strong>render</strong> as the entry point for rendering. But you
			can tell us to use a different one if you prefer by passing the name as
			the last param to the <code>Soy.register</code> call, like this:
		</p>

		<textarea class="code" data-mode="javascript">
{literal}Soy.register(MyComponent, templates, 'templateName');{/literal}
		</textarea>

		<h2>Template file</h2>

		<p>
			Make sure that your soy file has the entry point template
			(<strong>render</strong> by default), otherwise nothing will be rendered.
		</p>

		<p>
			This main template will receive as data a combination of:
			<ul>
				<li><a href="/docs/state.html">State data</a></li>
				<li><a href="/docs/state.html#config">Configuration data</a> (accessed through <code>this.config</code>)</li>
				<li><a href="/docs/inline-events.html#function">Component functions</a></li>
			</ul>
		</p>

		<p>
			Note that by default all params declared on the component's main soy
			template are automatically configured as state properties as well, but
			without any special configurations (like initial value or validators).
			If they're <a href="/docs/state.html">manually defined</a> through
			the <code>STATE</code> property they will retain the setup specified there
			though.
		</p>

		<p>
			Any params passed to the component but not directly declared on its main
			soy template will be treated as basic configuration data, meaning that
			changes to them will not automatically rerender the component. They can
			still be passed down to other templates using <code>data="all"</code>, as
			well be accessed via the <code>config</code> property on the js file.
		</p>

		<textarea class="code" data-mode="javascript">
{literal}// Contains all the data received by the component.
this.config{/literal}
		</textarea>

		<h2>Soy compilation</h2>

		<p>
			For the integration
			between <strong>Metal.js</strong> and <strong>soy</strong> to work, the
			soy files need to be compiled via one of our available build tools. That's
			because they don't just compile the code, but also add some information
			that help with the integration (like export declarations).
		</p>

		<p>
			The available build tools that correctly compile soy
			for <strong>Metal.js</strong> are:
		</p>

		<ul>
			<li>
				<p>
					<a href="http://npmjs.com/package/gulp-metal">gulp-metal</a> (already
					included when creating project
					via <a href="/docs/yeoman-generator.html">generator-metal</a>).
				</p>
			</li>
			<li>
				<p>
					<a href="http://npmjs.com/package/metal-cli">metal-cli</a>
				</p>
			</li>
			<li>
				<p>
					<a href="http://npmjs.com/package/metal-tools-soy">metal-tools-soy</a>
				</p>
			</li>
		</ul>
	{/param}
{/call}
{/template}
