{namespace docsAlias}

/**
 * This template will be rendered by SoyWeb when the user loads static.soy.
 * It deliberately includes dummy data so the designer can get a feel for how
 * the task list will appear with real data rather with minimal copy and paste.
 */
{template .soyweb}
{call docs.layout}
	{param content kind="html"}
		<h1>Alias</h1>

		<p>A straightforward way to import npm dependencies into your module is to use their relative paths, like we do for any other code. For example:</p>

		<textarea class="code" data-mode="javascript">{literal}
import core from '../node_modules/metal/src/core';{/literal}</textarea>

		<p>Having to supply the relative path to node_modules is not cool though and, besides that, it may cause problems when a module doing that is imported later as an npm dependency of another project, since the paths will change.</p>

		<p>Knowing that, Metal.js allows importing npm dependencies like you would from a regular node module, just by referencing their names. Note that this will only work when using Metal.js's <a href="/docs/building.html">build tools</a> or adding a similar logic to your build process yourself (though we provide a <a href="https://npmjs.com/package/babel-preset-metal">babel preset</a> with this logic that you can use separately too).</p>

		<p>With aliases, the previous example can be rewritten like this:</p>

		<textarea class="code" data-mode="javascript">import core from 'metal';</textarea>
	{/param}
{/call}
{/template}
