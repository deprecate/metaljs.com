{namespace docsInlineEvents}

/**
 * This template will be rendered by SoyWeb when the user loads static.soy.
 * It deliberately includes dummy data so the designer can get a feel for how
 * the task list will appear with real data rather with minimal copy and paste.
 */
{template .soyweb}
{call docs.layout}
	{param content kind="html"}
		<h1>Inline Events</h1>

		<p>
			Another feature Metal.js has that can be very useful is the ability to
			declare events inside templates, directly on the desired element. Besides
			being simple and intuitive, this feature allows Metal.js to handle
			attaching events itself, and so this can be done in the best way possible,
			with <a href="https://learn.jquery.com/events/event-delegation/">delegates</a> for
			example, without the user having worry about that at all. These events are
			also automatically detached when the component is disposed.
		</p>

		{call .functionName /}

		{call .functionReference /}

		<h2>Inline listeners - nested components</h2>

		<p>
			When using <a href="/docs/nested-components.html">nested components</a> it's
			also possible to inline events by using the <strong>events</strong> property:
		</p>

		{call codeTabs.main}
			{param tabs: ['Soy: src/Modal.soy', 'JSX: src/Modal.js'] /}
			{param content kind="html"}
				<textarea class="code" data-mode="x-soy">
{literal}&lbrace;call Button.render&rbrace;
  &lbrace;param events: ['click': ['selector': 'button', 'fn': 'close']] /&rbrace;
  &lbrace;param label: 'Ok' /&rbrace;
&lbrace;/call&rbrace;{/literal}
				</textarea>
				<textarea class="code hidden" data-mode="javascript">
{literal}var events = {click: {
  selector: 'button',
  fn: 'close'
}};
&lt;Button events={events} label="Ok" /&gt;{/literal}
				</textarea>
			{/param}
		{/call}

		<p>
			This will cause the <code>close</code> function from the sub component to
			be called whenever a click event triggers for the elements that match the
			given selector.
		</p>

		<p>In case you want to listen to the event with a function from the parent component, just pass the function reference instead of a string, like this:</p>

		{call codeTabs.main}
			{param tabs: ['Soy: src/Modal.soy', 'JSX: src/Modal.js'] /}
			{param content kind="html"}
				<textarea class="code" data-mode="x-soy">
{literal}&lbrace;call Button.render&rbrace;
  &lbrace;param events: ['click': ['selector': 'button', 'fn': $close]] /&rbrace;
  &lbrace;param label: 'Ok' /&rbrace;
&lbrace;/call&rbrace;{/literal}
				</textarea>
				<textarea class="code hidden" data-mode="javascript">
{literal}var events = {click: {
  selector: 'button',
  fn: this.close.bind(this)
}};
&lt;Button events={events} label="Ok" /&gt;{/literal}
				</textarea>
			{/param}
		{/call}

		<p>
			Besides dom events, you can also listen to custom events from the sub
			component in this same way:
		</p>

		{call codeTabs.main}
			{param tabs: ['Soy: src/Modal.soy', 'JSX: src/Modal.js'] /}
			{param content kind="html"}
				<textarea class="code" data-mode="x-soy">
{literal}&lbrace;call Button.render&rbrace;
  &lbrace;param events: ['labelChanged': $handleLabelChanged] /&rbrace;
  &lbrace;param label: 'Ok' /&rbrace;
&lbrace;/call&rbrace;{/literal}
				</textarea>
				<textarea class="code hidden" data-mode="javascript">
{literal}var events = {labelChanged: this.handleLabelChanged.bind(this)};
&lt;Button events={events} label="Ok" /&gt;{/literal}
				</textarea>
			{/param}
		{/call}

		<h2>Inline listeners - alternative usage</h2>

		<p>
			Besides the <code>on[EventName]</code> format you can also
			use <code>data-on[eventname]</code> for adding inline listeners. For
			example:
		</p>

		<textarea class="code" data-mode="javascript">
			{literal}&lt;button data-onclick="close" type="button" class="close"&gt;{/literal}
		</textarea>

		<p>
			Note that this format is supported mainly to enable
			doing <a href="/docs/progressive-enhancement.html">progressive enhancement</a>,
			when running soy templates via Java for example. When templates using
			the <code>on[EventName]</code> format run in Java they will output
			elements with these as actual attributes, which can cause errors in the
			browser. In JavaScript these are used as element properties instead, so
			this problem doesn't occur.
		</p>

		<p>
			So feel free to use the format you like best, or that better fits your
			needs.
		</p>
	{/param}
{/call}
{/template}

/**
 */
{template .functionName}
	<h2>Inline listeners - via function name</h2>

	<p>You can add DOM event listeners easily through your templates, like this:</p>

	<textarea class="code" data-mode="javascript">
		{literal}&lt;button onClick="close" type="button" class="close"&gt;{/literal}
	</textarea>

	<p>
		The above code declares that whenever the <strong>x</strong> button is
		clicked, the <code>close</code> function from the component should be
		called.
	</p>
{/template}

/**
 */
{template .functionReference}
	<h2 id="function">Inline listeners - via function reference</h2>

	<p>
		If you prefer though, you can also pass the actual function reference
		(instead of just its name) as an inline listener.
	</p>

	{call codeTabs.main}
		{param tabs: ['Soy: src/Modal.soy', 'JSX: src/Modal.js'] /}
		{param content kind="html"}
			<textarea class="code" data-mode="x-soy">
{literal}/**
 * In the "render" template, soy params that match a
 * component's function name will be that function
 * (automatically bound to the component instance).
 * @param close
 */
&lbrace;template .render&rbrace;
  // ...
  &lt;button onClick="{$close}" type="button" class="close"&gt;
  // ...
&lbrace;/template&rbrace;{/literal}
			</textarea>
			<textarea class="code hidden" data-mode="javascript">
	{literal}
&lt;button onClick={this.close.bind(this)} type="button" class="close"&gt;{/literal}
			</textarea>
		{/param}
	{/call}

	<p>
		That will work exactly the same way as the previous example.
	</p>
{/template}
