{namespace docsImporting}

/**
 * This template will be rendered by SoyWeb when the user loads static.soy.
 * It deliberately includes dummy data so the designer can get a feel for how
 * the task list will appear with real data rather with minimal copy and paste.
 */
{template .soyweb}
{call docs.layout}
	{param content kind="html"}
		<h1>Importing a third party component</h1>

		<p>There are now more libraries and frameworks available for front-end development than ever before. It's not uncommon to have five or more of these libraries involved in a single project. But keeping track of all these libraries and making sure they're up-to-date can be tricky. To solve this we can use Bower, a package manager that makes it easy to manage all your application's front-end dependencies.</p>

		<p>In this guide you are going to learn how to get up and running with Bower. You'll start by installing the Bower command-line utility and then go on to learn about the various commands that are available for managing metal components.</p>

		<p>Lets get started!</p>

		<h2>Installing Bower</h2>

		<p>Bower can be installed using npm, the Node package manager. If you don't already have npm installed, head over to the Node.js website and download the relevant copy of Node.js for your system. The npm program is included with the install of Node.js.</p>

		<p>Once you have npm installed, open up your terminal and enter the following command:</p>

		<pre><code>npm install -g bower
		</code></pre>

		<p>This will install Bower globally on your system.</p>

		<p>Now that you have Bower installed, we can start looking at the commands that are used to manage packages.</p>

		<h2>Finding components</h2>

		<p>There are two different ways that you can find Bower packages. Either using the online component directory, or using the command line utility.</p>

		<p>To search for packages on the command line you use the search command. This should be followed by your search query.</p>

		<pre><code>bower search &lt;query&gt;
		</code></pre>

		<p>For example to search for packages that contain the word ‘metal’ you could do the following:</p>

		<pre><code>
		bower search metal
		</code></pre>

		<p>This command would return a whole bunch of results, some of which are displayed in the snippet below.</p>

		<pre><code>
		Search results:

		    metaljs git://github.com/liferay/metal.git
		    metal-position git://github.com/eduardolundgren/metal-position.git
		    metal-promise git://github.com/eduardolundgren/metal-promise.git
		</code></pre>

		<p>Each result displays the name of the package and a Git endpoint. You will need either the name or Git endpoint to install a package.</p>

		<h2>Installing components</h2>

		<p>To add a new Bower package to your project you use the install command. This should be passed the name of the package you wish to install.</p>

		<pre><code>
		bower install &lt;package&gt;
		</code></pre>

		<p>In this example, we're going to install the <code>metal-position</code> component.</p>

		<pre><code>bower install metal-position
		</code></pre>

		<p>Installed packages will be placed in a <code>bower_components</code> directory. This is created in the folder which the bower program was executed.</p>

		<ul>
			<li><code>bower_components</code>
				<ul>
					<li><code>metaljs</code></li>
					<li><code>metal-position</code></li>
				</ul>
			</li>
		</ul>

		<p>You can change this destination using the configuration options in a <code>.bowerrc</code> file.</p>

		<h2>Importing a component</h2>

		<p>With the code already available, let's create a <code>main.js</code> file that will import the <code>metal-position</code> module. Note that we're using an <a href="/docs/alias.html">alias</a> to easily import bower files.</p>

		<textarea class="code" data-mode="javascript">
import position from 'bower:metal-position/src/position';</textarea>

		<p>This means that you can now call any function from that module, in this example we'll get the viewport height.</p>

		<textarea class="code" data-mode="javascript">
var viewportHeight = position.getClientHeight(window);

console.log(viewportHeight);</textarea>

		<p>Metal components are written in ES6 (a.k.a ECMAScript 2015), so you can also use ES6 on your code like we did on the example. Since ES6 isn't fully implemented on browsers yet though, either a polyfill or a build process is necessary before using Metal on a website.</p>
	{/param}
{/call}
{/template}
